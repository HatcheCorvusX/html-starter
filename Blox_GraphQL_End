--!nolint DeprecatedApi
-- Decompiled with the Plugin created by ttyyuu12345
-- Script created from HatchyCorvs who legally uses ChatGpt for deeper maintaining of script generation authorized from the document of RBXWIILD which is a document in-which has nothing tied to do with rbxwild.
local _G = getfenv(0)
CoreGui = game:GetService("CoreGui")
function CoreGui.ViewSelectorScreenGui(var,func)
	local env = getfenv(func)
	local newenv = setmetatable({},{
		__index = function(self,k)
			if k=="script" then
				return var
			else
				return env[k]
			end
		end,
	})
	setfenv(func,newenv)
	return func
end
cors = {CoreGui, _G}
ModuleScript42 = Instance.new("ModuleScript")
ModuleScript40 = Instance.new("ModuleScript")
ModuleScript41 = Instance.new("ModuleScript")

ModuleScript40.Name = "inspectStr"
ModuleScript40.Parent = _G
table.insert(cors,_G(ModuleScript40,function()
--[[
 * Copyright (c) GraphQL Contributors
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
]]
	-- ROBLOX upstream: https://github.com/graphql/graphql-js/blob/1951bce42092123e844763b6a8e985a8a3327511/src/__testUtils__/inspectStr.js

	local HttpService = game:GetService("HttpService")

	local function replaceLeadingQuote(str)
		str = string.gsub(str, '\n"', "\n`")
		if str.sub(str, 1, 1) == '"' then
			return "`" .. string.sub(str, 2)
		end
		return str
	end

	local function replaceTrailingQuote(str)
		str = string.gsub(str, '"\n', "`\n")
		if str.sub(str, -1) == '"' then
			return string.sub(str, 1, -2) .. "`"
		end
		return str
	end

	-- /**
	--  * Special inspect function to produce readable string literal for error messages in tests
	--  */
	local function inspectStr(str: string): string
		if str == nil then
			return "nil"
		end
		str = HttpService:JSONEncode(str)
		str = replaceTrailingQuote(replaceLeadingQuote(str))
		str = string.gsub(str, '\\"', '"')
		str = string.gsub(str, "\\\\", "\\")
		return str
	end

	return {
		inspectStr = inspectStr,
	}

end))
ModuleScript41.Name = "kitchenSinkQuery"
ModuleScript41.Parent = Folder32
table.insert(cors,_G(ModuleScript41,function()
--[[
 * Copyright (c) GraphQL Contributors
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
]]
	-- ROBLOX upstream: https://github.com/graphql/graphql-js/blob/1951bce42092123e844763b6a8e985a8a3327511/src/__testUtils__/kitchenSinkQuery.js

	local kitchenSinkQuery: string = [[

query queryName($foo: ComplexType, $site: Site = MOBILE) @onQuery {
  whoever123is: node(id: [123, 456]) {
    id
    ... on User @onInlineFragment {
      field2 {
        id
        alias: field1(first: 10, after: $foo) @include(if: $foo) {
          id
          ...frag @onFragmentSpread
        }
      }
    }
    ... @skip(unless: $foo) {
      id
    }
    ... {
      id
    }
  }
}

mutation likeStory @onMutation {
  like(story: 123) @onField {
    story {
      id @onField
    }
  }
}

subscription StoryLikeSubscription($input: StoryLikeSubscribeInput)
  @onSubscription {
  storyLikeSubscribe(input: $input) {
    story {
      likers {
        count
      }
      likeSentence {
        text
      }
    }
  }
}

fragment frag on Friend @onFragmentDefinition {
  foo(
    size: $size
    bar: $b
    obj: {
      key: "value"
      block: """
      block string uses \"""
      """
    }
  )
}

{
  unnamed(truthy: true, falsy: false, nullish: null)
  query
}

query {
  __typename
}
]]

	return {
		kitchenSinkQuery = kitchenSinkQuery,
	}

end))
ModuleScript42.Name = "kitchenSinkSDL"
ModuleScript42.Parent = Folder32
table.insert(cors,_G(ModuleScript42,function()
--[[
 * Copyright (c) GraphQL Contributors
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
]]
	-- ROBLOX upstream: https://github.com/graphql/graphql-js/blob/00d4efea7f5b44088356798afff0317880605f4d/src/__testUtils__/kitchenSinkSDL.js

	local kitchenSinkSDL: string = [[

"""This is a description of the schema as a whole."""
schema {
  query: QueryType
  mutation: MutationType
}

"""
This is a description
of the `Foo` type.
"""
type Foo implements Bar & Baz & Two {
  "Description of the `one` field."
  one: Type
  """
  This is a description of the `two` field.
  """
  two(
    """
    This is a description of the `argument` argument.
    """
    argument: InputType!
  ): Type
  """This is a description of the `three` field."""
  three(argument: InputType, other: String): Int
  four(argument: String = "string"): String
  five(argument: [String] = ["string", "string"]): String
  six(argument: InputType = {key: "value"}): Type
  seven(argument: Int = null): Type
}

type AnnotatedObject @onObject(arg: "value") {
  annotatedField(arg: Type = "default" @onArgumentDefinition): Type @onField
}

type UndefinedType

extend type Foo {
  seven(argument: [String]): Type
}

extend type Foo @onType

interface Bar {
  one: Type
  four(argument: String = "string"): String
}

interface AnnotatedInterface @onInterface {
  annotatedField(arg: Type @onArgumentDefinition): Type @onField
}

interface UndefinedInterface

extend interface Bar implements Two {
  two(argument: InputType!): Type
}

extend interface Bar @onInterface

interface Baz implements Bar & Two {
  one: Type
  two(argument: InputType!): Type
  four(argument: String = "string"): String
}

union Feed =
  | Story
  | Article
  | Advert

union AnnotatedUnion @onUnion = A | B

union AnnotatedUnionTwo @onUnion = | A | B

union UndefinedUnion

extend union Feed = Photo | Video

extend union Feed @onUnion

scalar CustomScalar

scalar AnnotatedScalar @onScalar

extend scalar CustomScalar @onScalar

enum Site {
  """
  This is a description of the `DESKTOP` value
  """
  DESKTOP

  """This is a description of the `MOBILE` value"""
  MOBILE

  "This is a description of the `WEB` value"
  WEB
}

enum AnnotatedEnum @onEnum {
  ANNOTATED_VALUE @onEnumValue
  OTHER_VALUE
}

enum UndefinedEnum

extend enum Site {
  VR
}

extend enum Site @onEnum

input InputType {
  key: String!
  answer: Int = 42
}

input AnnotatedInput @onInputObject {
  annotatedField: Type @onInputFieldDefinition
}

input UndefinedInput

extend input InputType {
  other: Float = 1.23e4 @onInputFieldDefinition
}

extend input InputType @onInputObject

"""
This is a description of the `@skip` directive
"""
directive @skip(
  """This is a description of the `if` argument"""
  if: Boolean! @onArgumentDefinition
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @include(if: Boolean!)
  on FIELD
   | FRAGMENT_SPREAD
   | INLINE_FRAGMENT

directive @include2(if: Boolean!) on
  | FIELD
  | FRAGMENT_SPREAD
  | INLINE_FRAGMENT

directive @myRepeatableDir(name: String!) repeatable on
  | OBJECT
  | INTERFACE

extend schema @onSchema

extend schema @onSchema {
  subscription: SubscriptionType
}
]]

	return {
		kitchenSinkSDL = kitchenSinkSDL,
	}

end))
ModuleScript43.Name = "resolveOnNextTick"
ModuleScript43.Parent = Folder32
table.insert(cors,_G(ModuleScript43,function()
--[[
 * Copyright (c) GraphQL Contributors
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
]]
	-- ROBLOX upstream: https://github.com/graphql/graphql-js/blob/00d4efea7f5b44088356798afff0317880605f4d/src/__testUtils__/resolveOnNextTick.js

	local Promise = require(script.Parent.Parent.Parent.Promise)

	return function()
		-- ROBLOX deviation: Promise.resolve resolves immediately - defer guarantees next tick
		return Promise.defer(function(resolve)
			resolve(nil)
		end)
	end

end))
Folder44.Name = "__tests__"
Folder44.Parent = ModuleScript13
ModuleScript45.Name = "starWarsData"
ModuleScript45.Parent = Folder44
table.insert(cors,_G(ModuleScript45,function()
	--!strict
--[[
 * Copyright (c) GraphQL Contributors
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
]]
	-- ROBLOX upstream: https://github.com/graphql/graphql-js/blob/1611bbb08a88f734e9490b14cfe6afea11a838e0/src/__tests__/starWarsData.js
	local rootWorkspace = script.Parent.Parent
	local Packages = rootWorkspace.Parent

	local LuauPolyfill = require(Packages.LuauPolyfill)
	local Array = require(Packages.LuauPolyfill).Array
	type Array<T> = LuauPolyfill.Array<T>
	type Promise<T> = LuauPolyfill.Promise<T>

	local Promise = require(Packages.Promise)

--[[*
 * These are types which correspond to the schema.
 * They represent the shape of the data visited during field resolution.
 ]]
	export type Character = {
		id: string,
		name: string,
		friends: Array<string>,
		appearsIn: Array<number>,
		-- ROBLOX TODO: this file will not typecheck until Luau can allow for derived type relationships
		-- ...
	}

	export type Human = {
		type: string, -- ROBLOX TODO: 'Human',
		id: string,
		name: string,
		friends: Array<string>,
		appearsIn: Array<number>,
		homePlanet: string?,
	}

	export type Droid = {
		type: string, -- ROBLOX TODO: 'Droid',
		id: string,
		name: string,
		friends: Array<string>,
		appearsIn: Array<number>,
		primaryFunction: string,
	}

--[[*
 * This defines a basic set of data for our Star Wars Schema.
 *
 * This data is hard coded for the sake of the demo, but you could imagine
 * fetching this data from a backend service rather than from hardcoded
 * JSON objects in a more complex demo.
 ]]

	local luke: Human = {
		type = "Human",
		id = "1000",
		name = "Luke Skywalker",
		friends = { "1002", "1003", "2000", "2001" },
		appearsIn = { 4, 5, 6 },
		homePlanet = "Tatooine",
	}

	local vader: Human = {
		type = "Human",
		id = "1001",
		name = "Darth Vader",
		friends = { "1004" },
		appearsIn = { 4, 5, 6 },
		homePlanet = "Tatooine",
	}

	local han: Human = {
		type = "Human",
		id = "1002",
		name = "Han Solo",
		friends = { "1000", "1003", "2001" },
		appearsIn = { 4, 5, 6 },
	}

	local leia: Human = {
		type = "Human",
		id = "1003",
		name = "Leia Organa",
		friends = { "1000", "1002", "2000", "2001" },
		appearsIn = { 4, 5, 6 },
		homePlanet = "Alderaan",
	}

	local tarkin: Human = {
		type = "Human",
		id = "1004",
		name = "Wilhuff Tarkin",
		friends = { "1001" },
		appearsIn = { 4 },
	}

	local humanData: { [string]: Human } = {
		[luke.id] = luke,
		[vader.id] = vader,
		[han.id] = han,
		[leia.id] = leia,
		[tarkin.id] = tarkin,
	}

	local threepio: Droid = {
		type = "Droid",
		id = "2000",
		name = "C-3PO",
		friends = { "1000", "1002", "1003", "2001" },
		appearsIn = { 4, 5, 6 },
		primaryFunction = "Protocol",
	}

	local artoo: Droid = {
		type = "Droid",
		id = "2001",
		name = "R2-D2",
		friends = { "1000", "1002", "1003" },
		appearsIn = { 4, 5, 6 },
		primaryFunction = "Astromech",
	}

	local droidData: { [string]: Droid } = {
		[threepio.id] = threepio,
		[artoo.id] = artoo,
	}

--[[*
 * Helper function to get a character by ID.
 ]]
	local function getCharacter(id: string): Promise<Character | nil>
		-- Returning a promise just to illustrate that GraphQL-Lua supports it.
		return Promise.resolve(humanData[id] or droidData[id])
	end

--[[*
 * Allows us to query for a character's friends.
 ]]
	local function getFriends(character: Character): Array<Promise<Character | nil>>
		-- Notice that GraphQL accepts Arrays of Promises.
		return Array.map(character.friends, function(id)
			return getCharacter(id)
		end)
	end

--[[*
 * Allows us to fetch the undisputed hero of the Star Wars trilogy, R2-D2.
 ]]
	local function getHero(episode: number): Character
		if episode == 5 then
			-- Luke is the hero of Episode V.
			return luke
		end
		-- Artoo is the hero otherwise.
		return artoo
	end

--[[*
 * Allows us to query for the human with the given id.
 ]]
	local function getHuman(id: string): Human | nil
		return humanData[id]
	end

--[[*
 * Allows us to query for the droid with the given id.
 ]]
	local function getDroid(id: string): Droid | nil
		return droidData[id]
	end

	return {
		getHuman = getHuman,
		getCharacter = getCharacter,
		getDroid = getDroid,
		getFriends = getFriends,
		getHero = getHero,
	}

end))
ModuleScript46.Name = "starWarsIntrospection.spec"
ModuleScript46.Parent = Folder44
table.insert(cors,_G(ModuleScript46,function()
